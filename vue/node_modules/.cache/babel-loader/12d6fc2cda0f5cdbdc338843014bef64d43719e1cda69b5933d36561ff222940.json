{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'StockDisplay',\n  data() {\n    return {\n      stockData: [],\n      loading: true,\n      error: null,\n      // 替换为你自己的Alpha Vantage API密钥\n      apiKey: '2DZOQIX9SAG4D36B',\n      // 股票代码映射\n      symbolsMap: {\n        '000001.SS': '上证指数',\n        '399001.SZ': '深证成指',\n        '399006.SZ': '创业板指',\n        '399905.SZ': '中证500'\n      }\n    };\n  },\n  mounted() {\n    this.fetchStockData();\n    // 每5分钟刷新一次数据\n    this.interval = setInterval(() => {\n      this.fetchStockData();\n    }, 300000);\n  },\n  beforeDestroy() {\n    // 组件销毁前清除定时器\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  },\n  methods: {\n    async fetchStockData() {\n      this.loading = true;\n      this.error = null;\n      try {\n        // 批量获取多个股票数据\n        const promises = Object.keys(this.symbolsMap).map(symbol => {\n          return axios.get('https://www.alphavantage.co/query', {\n            params: {\n              function: 'GLOBAL_QUOTE',\n              symbol: symbol,\n              apikey: this.apiKey\n            }\n          });\n        });\n        const responses = await Promise.all(promises);\n\n        // 处理API响应\n        this.stockData = responses.map((response, index) => {\n          const symbol = Object.keys(this.symbolsMap)[index];\n          const quote = response.data['Global Quote'];\n          if (!quote || !quote['01. symbol']) {\n            return {\n              name: this.symbolsMap[symbol],\n              price: 'N/A',\n              change: 0,\n              changePercent: 'N/A'\n            };\n          }\n          return {\n            name: this.symbolsMap[symbol],\n            price: parseFloat(quote['05. price']).toFixed(2),\n            change: parseFloat(quote['09. change']),\n            changePercent: parseFloat(quote['10. change percent']).toFixed(2)\n          };\n        });\n      } catch (error) {\n        console.error('获取股票数据失败:', error);\n        this.error = '获取股票数据失败，请稍后重试';\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","stockData","loading","error","apiKey","symbolsMap","mounted","fetchStockData","interval","setInterval","beforeDestroy","clearInterval","methods","promises","Object","keys","map","symbol","get","params","function","apikey","responses","Promise","all","response","index","quote","price","change","changePercent","parseFloat","toFixed","console"],"sources":["src/views/front/StockDisplay.vue"],"sourcesContent":["<template>\r\n  <div class=\"stock-display\">\r\n    <div class=\"top-border\"></div>\r\n    <div class=\"stock-data\">\r\n      <div v-if=\"loading\" class=\"loading\">\r\n        <i class=\"fa fa-spinner fa-spin\"></i> 加载中...\r\n      </div>\r\n      <div v-else-if=\"error\" class=\"error\">\r\n        <i class=\"fa fa-exclamation-triangle\"></i> {{ error }}\r\n      </div>\r\n      <div v-else>\r\n        <div v-for=\"(item, index) in stockData\" :key=\"index\" class=\"index-item\">\r\n          <span>{{ item.name }}</span>\r\n          <span :class=\"{ 'text-red': item.change > 0, 'text-green': item.change < 0 }\">\r\n            {{ item.price }} {{ item.change > 0 ? '▲' : '▼' }}\r\n          </span>\r\n          <span :class=\"{ 'text-red': item.change > 0, 'text-green': item.change < 0 }\">\r\n            {{ item.change > 0 ? '+' : '' }}{{ item.changePercent }}%\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"bottom-border\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'StockDisplay',\r\n  data() {\r\n    return {\r\n      stockData: [],\r\n      loading: true,\r\n      error: null,\r\n      // 替换为你自己的Alpha Vantage API密钥\r\n      apiKey: '2DZOQIX9SAG4D36B',\r\n      // 股票代码映射\r\n      symbolsMap: {\r\n        '000001.SS': '上证指数',\r\n        '399001.SZ': '深证成指',\r\n        '399006.SZ': '创业板指',\r\n        '399905.SZ': '中证500'\r\n      }\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchStockData();\r\n    // 每5分钟刷新一次数据\r\n    this.interval = setInterval(() => {\r\n      this.fetchStockData();\r\n    }, 300000);\r\n  },\r\n  beforeDestroy() {\r\n    // 组件销毁前清除定时器\r\n    if (this.interval) {\r\n      clearInterval(this.interval);\r\n    }\r\n  },\r\n  methods: {\r\n    async fetchStockData() {\r\n      this.loading = true;\r\n      this.error = null;\r\n\r\n      try {\r\n        // 批量获取多个股票数据\r\n        const promises = Object.keys(this.symbolsMap).map(symbol => {\r\n          return axios.get('https://www.alphavantage.co/query', {\r\n            params: {\r\n              function: 'GLOBAL_QUOTE',\r\n              symbol: symbol,\r\n              apikey: this.apiKey\r\n            }\r\n          });\r\n        });\r\n\r\n        const responses = await Promise.all(promises);\r\n\r\n        // 处理API响应\r\n        this.stockData = responses.map((response, index) => {\r\n          const symbol = Object.keys(this.symbolsMap)[index];\r\n          const quote = response.data['Global Quote'];\r\n\r\n          if (!quote || !quote['01. symbol']) {\r\n            return {\r\n              name: this.symbolsMap[symbol],\r\n              price: 'N/A',\r\n              change: 0,\r\n              changePercent: 'N/A'\r\n            };\r\n          }\r\n\r\n          return {\r\n            name: this.symbolsMap[symbol],\r\n            price: parseFloat(quote['05. price']).toFixed(2),\r\n            change: parseFloat(quote['09. change']),\r\n            changePercent: parseFloat(quote['10. change percent']).toFixed(2)\r\n          };\r\n        });\r\n\r\n      } catch (error) {\r\n        console.error('获取股票数据失败:', error);\r\n        this.error = '获取股票数据失败，请稍后重试';\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.stock-display {\r\n  width: 100%;\r\n  margin-top: 37px;\r\n}\r\n\r\n.top-border,\r\n.bottom-border {\r\n  border-top: 2px solid black;\r\n  width: 100%;\r\n}\r\n\r\n.stock-data {\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 10px 0;\r\n  font-weight: bold;\r\n}\r\n\r\n.index-item {\r\n  display: flex;\r\n  justify-content: space-around;\r\n  font-size: large;\r\n  margin-bottom: 15px;\r\n  font-weight: bold;\r\n}\r\n\r\n.loading, .error {\r\n  text-align: center;\r\n  padding: 20px;\r\n  color: #666;\r\n}\r\n\r\n.text-red {\r\n  color: red;\r\n}\r\n\r\n.text-green {\r\n  color: green;\r\n}\r\n</style>"],"mappings":"AA2BA,OAAAA,KAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;MACAC,OAAA;MACAC,KAAA;MACA;MACAC,MAAA;MACA;MACAC,UAAA;QACA;QACA;QACA;QACA;MACA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,cAAA;IACA;IACA,KAAAC,QAAA,GAAAC,WAAA;MACA,KAAAF,cAAA;IACA;EACA;EACAG,cAAA;IACA;IACA,SAAAF,QAAA;MACAG,aAAA,MAAAH,QAAA;IACA;EACA;EACAI,OAAA;IACA,MAAAL,eAAA;MACA,KAAAL,OAAA;MACA,KAAAC,KAAA;MAEA;QACA;QACA,MAAAU,QAAA,GAAAC,MAAA,CAAAC,IAAA,MAAAV,UAAA,EAAAW,GAAA,CAAAC,MAAA;UACA,OAAAnB,KAAA,CAAAoB,GAAA;YACAC,MAAA;cACAC,QAAA;cACAH,MAAA,EAAAA,MAAA;cACAI,MAAA,OAAAjB;YACA;UACA;QACA;QAEA,MAAAkB,SAAA,SAAAC,OAAA,CAAAC,GAAA,CAAAX,QAAA;;QAEA;QACA,KAAAZ,SAAA,GAAAqB,SAAA,CAAAN,GAAA,EAAAS,QAAA,EAAAC,KAAA;UACA,MAAAT,MAAA,GAAAH,MAAA,CAAAC,IAAA,MAAAV,UAAA,EAAAqB,KAAA;UACA,MAAAC,KAAA,GAAAF,QAAA,CAAAzB,IAAA;UAEA,KAAA2B,KAAA,KAAAA,KAAA;YACA;cACA5B,IAAA,OAAAM,UAAA,CAAAY,MAAA;cACAW,KAAA;cACAC,MAAA;cACAC,aAAA;YACA;UACA;UAEA;YACA/B,IAAA,OAAAM,UAAA,CAAAY,MAAA;YACAW,KAAA,EAAAG,UAAA,CAAAJ,KAAA,eAAAK,OAAA;YACAH,MAAA,EAAAE,UAAA,CAAAJ,KAAA;YACAG,aAAA,EAAAC,UAAA,CAAAJ,KAAA,wBAAAK,OAAA;UACA;QACA;MAEA,SAAA7B,KAAA;QACA8B,OAAA,CAAA9B,KAAA,cAAAA,KAAA;QACA,KAAAA,KAAA;MACA;QACA,KAAAD,OAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}