{"ast":null,"code":"export default {\n  name: 'StockDisplay',\n  data() {\n    return {\n      stockData: [{\n        name: '上证指数',\n        price: '3316.11',\n        change: 37.55,\n        changePercent: '1.14'\n      }, {\n        name: '深证成指',\n        price: '10082.33',\n        change: 183.76,\n        changePercent: '1.85'\n      }, {\n        name: '创业板指',\n        price: '1986.41',\n        change: 38.62,\n        changePercent: '1.98'\n      }, {\n        name: '中证500',\n        price: '5740.33',\n        change: 109.05,\n        changePercent: '1.93'\n      }]\n    };\n  },\n  mounted() {\n    // 模拟数据动态变化\n    this.interval = setInterval(() => {\n      this.updateMockData();\n    }, 5000);\n  },\n  beforeDestroy() {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  },\n  methods: {\n    updateMockData() {\n      this.stockData = this.stockData.map(item => {\n        // 随机小幅波动\n        const randomChange = (Math.random() - 0.5) * 10;\n        const newPrice = parseFloat(item.price) + randomChange;\n        const newChange = parseFloat(item.change) + randomChange;\n        const newChangePercent = (newChange / (newPrice - newChange) * 100).toFixed(2);\n        return {\n          ...item,\n          price: newPrice.toFixed(2),\n          change: newChange.toFixed(2),\n          changePercent: newChangePercent\n        };\n      });\n    }\n  }\n};","map":{"version":3,"names":["name","data","stockData","price","change","changePercent","mounted","interval","setInterval","updateMockData","beforeDestroy","clearInterval","methods","map","item","randomChange","Math","random","newPrice","parseFloat","newChange","newChangePercent","toFixed"],"sources":["src/views/front/StockDisplay.vue"],"sourcesContent":["<template>\r\n  <div class=\"stock-display\">\r\n    <div class=\"top-border\"></div>\r\n    <div class=\"stock-data\">\r\n      <div v-for=\"(item, index) in stockData\" :key=\"index\" class=\"index-item\">\r\n        <span>{{ item.name }}</span>\r\n        <span :class=\"{ 'text-red': item.change > 0, 'text-green': item.change < 0 }\">\r\n          {{ item.price }} {{ item.change > 0 ? '▲' : '▼' }}\r\n        </span>\r\n        <span :class=\"{ 'text-red': item.change > 0, 'text-green': item.change < 0 }\">\r\n          {{ item.change > 0 ? '+' : '' }}{{ item.changePercent }}%\r\n        </span>\r\n      </div>\r\n    </div>\r\n    <div class=\"bottom-border\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'StockDisplay',\r\n  data() {\r\n    return {\r\n      stockData: [\r\n        { name: '上证指数', price: '3316.11', change: 37.55, changePercent: '1.14' },\r\n        { name: '深证成指', price: '10082.33', change: 183.76, changePercent: '1.85' },\r\n        { name: '创业板指', price: '1986.41', change: 38.62, changePercent: '1.98' },\r\n        { name: '中证500', price: '5740.33', change: 109.05, changePercent: '1.93' }\r\n      ]\r\n    };\r\n  },\r\n  mounted() {\r\n    // 模拟数据动态变化\r\n    this.interval = setInterval(() => {\r\n      this.updateMockData();\r\n    }, 5000);\r\n  },\r\n  beforeDestroy() {\r\n    if (this.interval) {\r\n      clearInterval(this.interval);\r\n    }\r\n  },\r\n  methods: {\r\n    updateMockData() {\r\n      this.stockData = this.stockData.map(item => {\r\n        // 随机小幅波动\r\n        const randomChange = (Math.random() - 0.5) * 10;\r\n        const newPrice = parseFloat(item.price) + randomChange;\r\n        const newChange = parseFloat(item.change) + randomChange;\r\n        const newChangePercent = ((newChange / (newPrice - newChange)) * 100).toFixed(2);\r\n\r\n        return {\r\n          ...item,\r\n          price: newPrice.toFixed(2),\r\n          change: newChange.toFixed(2),\r\n          changePercent: newChangePercent\r\n        };\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.stock-display {\r\n  width: 100%;\r\n  margin-top: 37px;\r\n}\r\n\r\n.top-border,\r\n.bottom-border {\r\n  border-top: 2px solid black;\r\n  width: 100%;\r\n}\r\n\r\n.stock-data {\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 10px 0;\r\n  font-weight: bold;\r\n}\r\n\r\n.index-item {\r\n  display: flex;\r\n  justify-content: space-around;\r\n  font-size: large;\r\n  margin-bottom: 15px;\r\n  font-weight: bold;\r\n}\r\n\r\n.loading, .error {\r\n  text-align: center;\r\n  padding: 20px;\r\n  color: #666;\r\n}\r\n\r\n.text-red {\r\n  color: red;\r\n}\r\n\r\n.text-green {\r\n  color: green;\r\n}\r\n</style>"],"mappings":"AAmBA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,SAAA,GACA;QAAAF,IAAA;QAAAG,KAAA;QAAAC,MAAA;QAAAC,aAAA;MAAA,GACA;QAAAL,IAAA;QAAAG,KAAA;QAAAC,MAAA;QAAAC,aAAA;MAAA,GACA;QAAAL,IAAA;QAAAG,KAAA;QAAAC,MAAA;QAAAC,aAAA;MAAA,GACA;QAAAL,IAAA;QAAAG,KAAA;QAAAC,MAAA;QAAAC,aAAA;MAAA;IAEA;EACA;EACAC,QAAA;IACA;IACA,KAAAC,QAAA,GAAAC,WAAA;MACA,KAAAC,cAAA;IACA;EACA;EACAC,cAAA;IACA,SAAAH,QAAA;MACAI,aAAA,MAAAJ,QAAA;IACA;EACA;EACAK,OAAA;IACAH,eAAA;MACA,KAAAP,SAAA,QAAAA,SAAA,CAAAW,GAAA,CAAAC,IAAA;QACA;QACA,MAAAC,YAAA,IAAAC,IAAA,CAAAC,MAAA;QACA,MAAAC,QAAA,GAAAC,UAAA,CAAAL,IAAA,CAAAX,KAAA,IAAAY,YAAA;QACA,MAAAK,SAAA,GAAAD,UAAA,CAAAL,IAAA,CAAAV,MAAA,IAAAW,YAAA;QACA,MAAAM,gBAAA,IAAAD,SAAA,IAAAF,QAAA,GAAAE,SAAA,SAAAE,OAAA;QAEA;UACA,GAAAR,IAAA;UACAX,KAAA,EAAAe,QAAA,CAAAI,OAAA;UACAlB,MAAA,EAAAgB,SAAA,CAAAE,OAAA;UACAjB,aAAA,EAAAgB;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}